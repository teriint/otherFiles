1
00:00:02,260 --> 00:00:07,040
Ora sappiamo cosa reagire in realt  tempo di sporcarci le mani.

2
00:00:07,070 --> 00:00:14,900
E per questo ero un codice Penn Dot I O che  come il nostro web editor che ci permette di

3
00:00:14,960 --> 00:00:20,120
scrivere semplicissime applicazioni HVM LCS e Javascript o davvero pi come un parco giochi.

4
00:00:20,150 --> 00:00:23,570
Non lo useremo per costruire progetti reali in questo corso.

5
00:00:23,630 --> 00:00:29,730
Useremo una configurazione locale per questo, ma  fantastico immergersi nel reagire in modo codipendente.

6
00:00:29,810 --> 00:00:36,450
So che puoi cliccare su creare e creare una cosiddetta penna che  semplicemente uno spazio di lavoro in cui puoi scrivere h

7
00:00:36,500 --> 00:00:39,330
t m l c s s e il codice Javascript.

8
00:00:39,350 --> 00:00:44,150
Ora in questo editor hai tre aree per H M L C S S e Javascript.

9
00:00:44,150 --> 00:00:47,830
E ora scriviamo un'applicazione molto semplice.

10
00:00:47,870 --> 00:00:54,650
Una demo per vedere come scriviamo qualcosa con normale HVM all javascript e cos via e

11
00:00:54,680 --> 00:00:59,440
come aggiungiamo reagire, forse  pi facile creare un'applicazione del genere.

12
00:00:59,440 --> 00:01:05,210
E la parte HVM di questo editor ti uccide e puoi creare rapidamente questo, ma digitando Dev

13
00:01:05,210 --> 00:01:06,160
e scheda colpendo.

14
00:01:06,170 --> 00:01:08,250
Questo lo espander automaticamente.

15
00:01:08,540 --> 00:01:12,890
E poi ci aggiunger ora una tecnologia e parte dell'output.

16
00:01:12,900 --> 00:01:19,210
Max il mio nome e sotto al punto sollevare dire la tua et 28.

17
00:01:19,220 --> 00:01:20,050
Ha la mia et.

18
00:01:20,060 --> 00:01:22,450
E naturalmente sentiti libero di usare i tuoi dati qui.

19
00:01:22,490 --> 00:01:24,950
Quindi questo ora porta all'output sottostante.

20
00:01:24,980 --> 00:01:27,320
Si aggiorna automaticamente.

21
00:01:27,320 --> 00:01:29,820
Ora diamo velocemente un po 'di stile.

22
00:01:29,900 --> 00:01:37,310
Diamo semplicemente a Steve, forse, una classe di diciamo la persona che il nome sta a te e aggiungi questa persona C come questa classe

23
00:01:37,310 --> 00:01:42,260
con una visione normale  il codice degli Stati Uniti dove semplicemente do questo diciamo un confine.

24
00:01:42,320 --> 00:01:53,150
pixel solido e funziona perfettamente con CCC e un'ombra di casella di 0 2 pixel 2 pixel e diciamo lo stesso grigio.

25
00:01:53,150 --> 00:01:53,520
Un

26
00:01:53,570 --> 00:01:58,840
Forse ci perdiamo usare un po 'pi luminoso qui e.

27
00:01:58,880 --> 00:02:00,010
Per il confine.

28
00:02:00,230 --> 00:02:08,240
Non diamo anche una larghezza di diciamo 200 pixel e il riempimento di 20 pixel e ora

29
00:02:08,240 --> 00:02:11,760
abbiamo questa scheda come vedi qui sotto.

30
00:02:11,870 --> 00:02:17,990
Questa  una informazione della carta di una persona che contiene informazioni su una persona, diciamo.

31
00:02:18,290 --> 00:02:27,830
che devono essere visualizzati nel blocco di linee e dargli un margine di 10 pixel perch ora quello che posso fare 

32
00:02:27,830 --> 00:02:36,750
che posso ovviamente replicarlo e aggiungere una seconda persona diciamo Manue che ha 29 anni che  il mio collega.

33
00:02:36,750 --> 00:02:37,880
Possiamo anche dire

34
00:02:38,280 --> 00:02:45,930
Quindi ora abbiamo queste due schede personali e potresti facilmente pensarla come una normale applicazione web in cui pubblichi alcune

35
00:02:45,930 --> 00:02:52,320
informazioni sugli utenti o sul team dietro un albero o un blog che stai creando qualcosa

36
00:02:52,320 --> 00:02:53,150
del genere.

37
00:02:53,310 --> 00:02:56,110
Stiamo usando solo il team Eliseus qui.

38
00:02:56,250 --> 00:02:59,370
Ora possiamo gi vedere un tipo di limitazione.

39
00:02:59,580 --> 00:03:04,150
Stiamo sempre riutilizzando lo stesso codice HMO qui.

40
00:03:04,320 --> 00:03:06,660
Ora non  troppo problematico qui.

41
00:03:06,780 --> 00:03:11,610
Sarebbe pi problematico se avessimo fatto qualcosa con ciascuno di questi frammenti con javascript,

42
00:03:12,000 --> 00:03:16,800
ma anche senza di esso possiamo pensare a questa parte qui come componente.

43
00:03:16,860 --> 00:03:23,290
La morte della persona  sempre strutturata nello stesso modo in cui i dati all'interno di essa variano.

44
00:03:23,310 --> 00:03:29,720
 qui che entra in gioco il re-act, anche se le reazioni alla maggior parte delle quali ci colleghiamo  anche alla logica javascript.

45
00:03:29,730 --> 00:03:34,430
Ma ancora possiamo gi usare reagire per creare componenti riutilizzabili qui.

46
00:03:34,500 --> 00:03:36,300
Per questo aggiungiamo reagire.

47
00:03:36,300 --> 00:03:41,430
Ho intenzione di restringere questa serie come parte un po 'e qualsiasi area javascript.

48
00:03:41,550 --> 00:03:44,020
Prima di tutto devi importare reagire.

49
00:03:44,330 --> 00:03:51,060
Puoi fare clic sull'icona accanto a javascript e quindi puoi scaricare o importare alcune

50
00:03:51,060 --> 00:03:55,780
librerie javascript esterne e re-act  una tale libreria esterna.

51
00:03:55,800 --> 00:04:02,880
In realt  cos popolare che la penna Ancoats si pu andare al rapido e discesa e semplicemente

52
00:04:03,000 --> 00:04:04,230
scorrere per reagire.

53
00:04:04,230 --> 00:04:05,440
E questo lo aggiunger.

54
00:04:05,440 --> 00:04:08,030
Ora qui aggiunge la versione 15 di Datsik.

55
00:04:08,030 --> 00:04:12,440
Uno potrebbe differire nel momento in cui stai visualizzando questo in questo corso.

56
00:04:12,450 --> 00:04:18,570
stia imparando l'ultima reazione e quindi la configurazione locale che user in questo corso user anche le ultime reazioni con.

57
00:04:18,570 --> 00:04:21,390
Coprir il lavoro in 16 in modo che tu

58
00:04:21,420 --> 00:04:27,600
Non ci sono problemi qui, tuttavia stiamo usando uno pi vecchio, ma per la demo qui questo non ha alcuna importanza.

59
00:04:27,600 --> 00:04:30,720
Dobbiamo anche affrettare e reagire a Dom.

60
00:04:30,810 --> 00:04:37,860
Questo  un altro pacchetto del re-act team re-act in s  la logica di cui abbiamo bisogno

61
00:04:37,860 --> 00:04:39,680
per creare questi componenti re-act.

62
00:04:39,690 --> 00:04:46,530
Ti ho detto che il re-act riguarda solo il fatto che i componenti re-act arm riguardano il rendering di

63
00:04:46,530 --> 00:04:50,980
questi componenti nel vero Daun con questi due pacchetti aggiunti. Siamo quasi arrivati.

64
00:04:51,030 --> 00:04:57,570
un intero modulo in cui ti presenter le pi importanti funzionalit di next gen che useranno gli utenti.

65
00:04:57,570 --> 00:05:03,030
Ma re-act usa una speciale sintassi javascript e molte delle funzionalit javascript di nuova generazione che

66
00:05:03,030 --> 00:05:05,410
verranno riportate pi avanti nel corso. Avr

67
00:05:05,790 --> 00:05:13,320
Quindi, per sbloccare l'utilizzo di queste funzionalit e la sintassi speciale nel menu a discesa del preprocessore

68
00:05:13,560 --> 00:05:15,170
javascript, devi solo chiacchierare.

69
00:05:15,270 --> 00:05:21,330
Questo  semplicemente uno strumento che compila il codice javascript di prossima generazione che stai scrivendo qui per codice che funziona

70
00:05:21,420 --> 00:05:25,750
bene nel browser in modo che scriviamo il codice con tutte le funzionalit che vogliamo.

71
00:05:25,830 --> 00:05:28,450
Ma il codice della nave funziona nel browser.

72
00:05:28,770 --> 00:05:34,680
 possibile fare clic su Salva e chiudi e ora possiamo iniziare a scrivere la nostra app di re-act qui nella sezione javascript.

73
00:05:34,680 --> 00:05:35,430
E con questo

74
00:05:35,430 --> 00:05:36,690
Quindi perch non lo facciamo.

75
00:05:36,990 --> 00:05:43,250
Creiamo un componente re-act in modo che abbiamo un elemento HVM l riutilizzabile.

76
00:05:43,410 --> 00:05:49,400
Possiamo usare invece di ripetere questo HVM tutto il codice qui a sinistra nella sua forma pi elementare

77
00:05:49,410 --> 00:05:55,710
e imparerai a conoscere una forma diversa in questo corso alla sua forma pi semplice un componente di re-act

78
00:05:55,770 --> 00:06:01,140
 solo una funzione in modo che possiamo creare una nuova funzione e magari nominarla.

79
00:06:01,290 --> 00:06:08,880
Assicurati che inizi con una P maiuscola  necessario per usarlo correttamente con re-act questo componente persona

80
00:06:09,270 --> 00:06:13,100
 una funzione normale, ma deve restituire decodifica.

81
00:06:13,100 --> 00:06:20,320
In realt si desidera eseguire il rendering sul Dom e qui re-act utilizza una sintassi speciale che viene chiamata J come x.

82
00:06:20,500 --> 00:06:25,680
Sto usando le parentesi qui per essere in grado di scrivere o restituire del codice multi-line.

83
00:06:26,040 --> 00:06:32,190
E ora ho intenzione di copiare il codice qui da sinistra e incollarlo nella mia dichiarazione di ritorno qui.

84
00:06:32,400 --> 00:06:35,670
E questo certamente sembra strano No sembra h tim tim.

85
00:06:35,760 --> 00:06:43,860
In javascript che non funzionerebbe normalmente e non lo farebbe se non avessimo aggiunto Batal qui come un

86
00:06:44,520 --> 00:06:50,880
preprocessore Balal se configurato correttamente che qui  automaticamente ci permette di usare questo

87
00:06:50,880 --> 00:06:57,550
indice speciale che assomiglia a H. T. mail ma che non  e mi tuffer pi in profondit in quella sintassi nei moduli del prossimo corso.

88
00:06:57,690 --> 00:07:01,420
Si chiama Deus Ex ed  solo zucchero sintattico.

89
00:07:01,530 --> 00:07:06,060
Dietro le quinte questo viene compilato nel normale codice Javascript.

90
00:07:06,060 --> 00:07:11,450
Possiamo usarlo qui per per avere un tempo pi facile a scrivere ci che vogliamo effettivamente renderizzare.

91
00:07:11,640 --> 00:07:16,750
Bene, ora abbiamo questa funzione e ho detto che il componente della malattia si riattiva.

92
00:07:17,010 --> 00:07:21,940
Ma ovviamente adesso  solo una funzione per trasformare questo in un componente re-act.

93
00:07:21,960 --> 00:07:26,220
In realt dobbiamo usare reagire per renderlo sullo schermo.

94
00:07:26,460 --> 00:07:33,600
Quindi mi liberer della mia borsa e tu sei sulla sinistra e invece sono a un nuovo anno

95
00:07:33,600 --> 00:07:36,560
div e ti dar l'idea di dire p.

96
00:07:36,710 --> 00:07:39,440
Puoi comunque scegliere qualsiasi ID che desideri.

97
00:07:39,560 --> 00:07:45,430
Ora reagisci, il pacchetto che abbiamo importato  responsabile della corretta analisi del codice dei giorni.

98
00:07:45,450 --> 00:07:47,450
Ecco il codice GSX.

99
00:07:47,660 --> 00:07:52,620
Il pacchetto di Obert che abbiamo importato era un recinto del dormitorio se ti ricordi.

100
00:07:52,670 --> 00:07:55,910
Puoi sempre controllare il tuo equipaggiamento su cui posso reagire.

101
00:07:56,090 --> 00:08:02,980
Questo in realt espone un oggetto re-act Dom scritto in questo modo con Dom tutti che sono caratteri maiuscoli

102
00:08:02,990 --> 00:08:05,000
con un metodo di rendering.

103
00:08:05,000 --> 00:08:14,700
Questo metodo ci consente di eseguire il rendering di una funzione javascript come componente del Dom reale e di trattarlo come una parte

104
00:08:14,710 --> 00:08:18,960
componente  esattamente ci a cui Riak si prende cura.

105
00:08:19,460 --> 00:08:23,990
Possiamo quindi rendere questa funzione, ma non riferendola in questo modo.

106
00:08:24,080 --> 00:08:32,000
Ma trasformandolo di nuovo in un elemento HVM dietro le quinte usando questa sintassi GSX che viene

107
00:08:32,000 --> 00:08:33,620
interpretata per reazione.

108
00:08:34,040 --> 00:08:42,400
Cos scrivo questo come il mio elemento HVM l autochiudente personalizzato e poi rendo un altro

109
00:08:42,410 --> 00:08:45,220
argomento dove specifichi dove renderlo l.

110
00:08:45,250 --> 00:08:48,860
Raggiungo il documento e pu utilizzare un selettore di query.

111
00:08:48,860 --> 00:08:56,830
Quindi normale codice javascript per selezionare qualsiasi elemento con l'ID P1 e che  di nuovo normale codice Javascript.

112
00:08:56,880 --> 00:08:59,010
Il normale selettore di query.

113
00:08:59,510 --> 00:09:09,650
Con ci sto dicendo di re-act che voglio rendere questa funzione un componente persona in display qui a

114
00:09:09,650 --> 00:09:12,100
sinistra e lo fa.

115
00:09:12,320 --> 00:09:19,340
Ora lo stile  perso perch la classe in realt  una parola chiave in javascript, quindi reagisci touristas al nome della

116
00:09:19,340 --> 00:09:22,730
classe e questa  la migliore prova che assomigli all'H-G.

117
00:09:22,760 --> 00:09:23,480
Ma non lo .

118
00:09:23,540 --> 00:09:30,350
Utilizza un indice personalizzato che nel 99 percento dei casi  come HGL ma dietro le quinte viene

119
00:09:30,410 --> 00:09:31,410
trasformato in javascript.

120
00:09:31,880 --> 00:09:39,800
linea qui  un po 'ignorato perch lo stiamo avvolgendo in un elemento personalizzato che viene trattato come un dichiarazione di blocco.

121
00:09:39,890 --> 00:09:47,000
E ora vedi che qui abbiamo di nuovo la nostra classe di persone Max trattata come un componente personalizzato che

122
00:09:47,000 --> 00:09:50,780
possiamo verificare sul fatto che il nostro stile di blocco in

123
00:09:50,780 --> 00:09:53,050
Ora mi tuffer nello styling in quei core.

124
00:09:53,120 --> 00:09:58,320
Per ora, siamo felici di aver realizzato qui il nostro componente.

125
00:09:58,580 --> 00:10:00,450
Tuttavia non  davvero riutilizzabile.

126
00:10:00,590 --> 00:10:10,450
Se avessi un secondo gancio nel mio H. T. la bocca cadr qui nella mia et, partirai diciamo anche con ITP.

127
00:10:10,490 --> 00:10:14,480
E volevo rendere un componente diverso una persona diversa.

128
00:10:14,780 --> 00:10:19,430
Non avrei dovuto codificare i valori in quello e in realt creare un nuovo componente.

129
00:10:19,430 --> 00:10:26,150
Il bello della reazione e il motivo per cui i componenti sono cos fantastici e ci fa risparmiare un sacco

130
00:10:26,150 --> 00:10:30,060
di tempo  che possiamo configurarli dinamicamente come ne abbiamo bisogno.

131
00:10:30,120 --> 00:10:36,920
Quindi qui quello che far in realt  tutto aggiungere un argomento a questa funzione persona che ha nominato oggetti di scena.

132
00:10:36,950 --> 00:10:42,950
Puoi scegliere qualsiasi nome tu voglia ma il concetto che sto usando qui  chiamato prop's

133
00:10:42,950 --> 00:10:48,830
react mi d automaticamente un argomento in quella funzione che ho trasformato in un componente con

134
00:10:48,830 --> 00:10:57,140
questa sintassi quaggi con la persona J  il codice X e Propp semplicemente contiene tutto attributi che aggiungo al mio componente.

135
00:10:57,140 --> 00:11:00,320
Quindi potrei aggiungere il nome Max ed et.

136
00:11:00,530 --> 00:11:03,720
Diciamo ventotto come questo.

137
00:11:03,900 --> 00:11:08,820
Se lo faccio ora possiamo produrre questo nella nostra componente carceraria.

138
00:11:08,820 --> 00:11:12,130
Abbiamo solo bisogno di accedere dinamicamente a questo elemento di scena.

139
00:11:12,150 --> 00:11:18,600
Questo suggerisce l'output di contenuti dinamici e la reazione con la chiusura di apertura di Cauley Brace e una

140
00:11:18,600 --> 00:11:19,190
sola coppia.

141
00:11:19,200 --> 00:11:22,540
Nessuna doppia parentesi graffa solo un paio di parentesi graffe.

142
00:11:22,860 --> 00:11:30,540
poi il nome Daut per ottenere questo attributo nome il loro passato e l'et prop per produrre quell'et corretta

143
00:11:30,660 --> 00:11:37,710
oltre l'et prop e ora stiamo usando le propriet gli attributi che stiamo passando al nostro componente e

144
00:11:37,830 --> 00:11:44,820
questo  piuttosto bello perch ora se lo ripetiamo reagisce darm renderizza una chiamata qui per P2.

145
00:11:44,820 --> 00:11:48,010
E poi raggiungiamo gli oggetti di scena e

146
00:11:48,150 --> 00:11:51,510
Quindi assicurati di scambiare non  il secondo selettore di query.

147
00:11:51,900 --> 00:11:59,370
Possiamo passare diversi oggetti di scena alla componente di morte come Manue e 20: 9 e ora entrambi i componenti usano la

148
00:11:59,370 --> 00:12:01,010
stessa base che puoi vedere.

149
00:12:01,110 --> 00:12:07,140
Usano la stessa funzione che viene trasformata in un componente reagendo ma sfruttando davvero il

150
00:12:07,140 --> 00:12:14,940
concetto di componente perch abbiamo solo scritto il codice HMO una volta e ora possiamo riutilizzarlo pi e pi

151
00:12:14,940 --> 00:12:15,580
volte.

152
00:12:15,720 --> 00:12:19,810
E scommetto che puoi vedere il potenziale di questo in applicazioni molto grandi.

153
00:12:19,890 --> 00:12:26,720
 possibile comporre l'intera applicazione di pezzi riutilizzabili e questo componente non utilizza nemmeno alcuna logica.

154
00:12:26,850 --> 00:12:32,600
Non ascolta i clic o cose del genere in app come l'app che costruiamo in questo corso.

155
00:12:32,730 --> 00:12:34,160
Ovviamente lo faremo.

156
00:12:34,200 --> 00:12:41,340
Aggiungiamo la nostra logica ai nostri componenti e quindi abbiamo piccoli pezzi riutilizzabili manutenibili e facili da

157
00:12:41,340 --> 00:12:48,290
gestire con la loro logica contenuta in essi che possiamo usare ovunque per creare applicazioni sorprendenti.

158
00:12:48,300 --> 00:12:54,690
Questa  l'idea alla base della reazione e questo  il motivo per cui  cos eccezionale e perch il concetto di componenti  cos eccezionale.

159
00:12:54,690 --> 00:12:56,700
Ora lasciami fare ancora una cosa.

160
00:12:56,790 --> 00:12:59,670
In questo momento sto chiamando reagire sul rendering due volte.

161
00:12:59,670 --> 00:13:04,440
Non c' niente di sbagliato in questo, ma in realt possiamo anche farlo in modo un po 'diverso.

162
00:13:04,440 --> 00:13:10,050
Non potremmo averne uno se sei nella parte HMO che ha un'idea di app o root.

163
00:13:10,110 --> 00:13:12,640
Non ha importanza alcuna idea della tua scelta.

164
00:13:12,750 --> 00:13:18,840
Ora sbarazzati dell'atto secondario sul rendering della chiamata e aggiunger qui una variabile.

165
00:13:18,960 --> 00:13:22,520
Questa variabile tutte le app nominative ma questo nome dipende anche da te.

166
00:13:22,620 --> 00:13:25,920
Ma proprio questo opposto manterr qualche j come codice X.

167
00:13:25,920 --> 00:13:31,060
Sto solo avvolgendo questo in parentesi in modo che io possa scrivere questo codice su pi righe.

168
00:13:31,080 --> 00:13:43,710
fatto prima di doverlo avvolgere con un dip perch GSX ha il requisito di avere solo un elemento radice in modo che gli elementi adiacenti non siano consentiti.

169
00:13:43,710 --> 00:13:50,580
Ora qui quello che posso fare  che ora posso emettere il mio componente personale

170
00:13:50,580 --> 00:13:51,650
come ho

171
00:13:51,660 --> 00:13:56,430
Ne parler anche se, naturalmente, ci sono dei modi per aggirare questa limitazione.

172
00:13:56,460 --> 00:14:04,560
Cos ora ho aggiunto un uso di componenti di due persone alla mia variabile app qui e ora 

173
00:14:04,800 --> 00:14:14,070
semplicemente montare la variabile app al posto di questo elemento con l'app ID che seleziono regolando il mio selettore di query.

174
00:14:14,070 --> 00:14:18,070
E ora vedi che ottengo i due elementi ora uno accanto all'altro.

175
00:14:18,300 --> 00:14:23,160
Perch ora sono resi nello stesso hook nello stesso elemento.

176
00:14:23,160 --> 00:14:32,070
sul rendering di una chiamata e quindi creare un up con componenti nidificati  un modo molto pi popolare di creare app re-act.

177
00:14:32,070 --> 00:14:38,190
Quindi, per dire nella stessa profondit e questo metodo di avere un solo hook uno reagisce

178
00:14:38,220 --> 00:14:43,120
 il modo in cui user in questo corso e nella prossima lezione parler di questo.

179
00:14:43,160 --> 00:14:46,910
Come l'alternativa con pi reazioni sul rendering richiama.

180
00:14:46,960 --> 00:14:52,010
Ma sappi che questo  il modo in cui vedrai molto pi spesso con questo approccio.

181
00:14:52,050 --> 00:14:56,060
Crei le cosiddette applicazioni a singola pagina.

182
00:14:56,080 --> 00:14:59,110
Questa  la nostra prima app di re-act.

183
00:14:59,130 --> 00:15:01,290
Ora approfondiamoci nel reattore.

184
00:15:01,300 --> 00:15:05,160
Continuiamo con i Chloris e cominciamo davvero con il re-act.

